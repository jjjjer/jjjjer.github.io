{"meta":{"title":"JeBlog","subtitle":"Begin again","description":"","author":"Janea1","url":"https://jjjjer.github.io","root":"/"},"pages":[{"title":"about","date":"2021-11-24T08:31:40.000Z","updated":"2021-11-24T08:46:30.824Z","comments":true,"path":"about/index.html","permalink":"https://jjjjer.github.io/about/index.html","excerpt":"","text":""},{"title":"404","date":"2021-11-25T08:17:52.000Z","updated":"2021-11-25T08:18:30.542Z","comments":true,"path":"404/index.html","permalink":"https://jjjjer.github.io/404/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-11-24T08:13:09.000Z","updated":"2021-11-24T08:48:27.037Z","comments":true,"path":"categories/index.html","permalink":"https://jjjjer.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-11-24T08:14:22.000Z","updated":"2021-11-24T08:48:40.131Z","comments":true,"path":"tags/index.html","permalink":"https://jjjjer.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"脚本编写过程记录","slug":"自动打卡脚本编写过程记录","date":"2021-12-23T13:47:17.000Z","updated":"2021-12-23T13:55:49.492Z","comments":true,"path":"2021/12/23/zi-dong-da-qia-jiao-ben-bian-xie-guo-cheng-ji-lu/","link":"","permalink":"https://jjjjer.github.io/2021/12/23/zi-dong-da-qia-jiao-ben-bian-xie-guo-cheng-ji-lu/","excerpt":"","text":"脚本编写过程记录登录过程 在进行写脚本之前首先跑通整个登录过程并抓包分析，本文是根据同院同学的打卡脚本找到的登录入口，现在学校已经进行了微服务的升级，升级之后的登录入口更改，并且需要验证码校验，等有空了再研究。 登录入口如下，https://wfw.scu.edu.cn/site/polymerization/polymerizationLogin?redirect=https%3A%2F%2Fwfw.scu.edu.cn%2Fncov%2Fwap%2Fdefault%2Findex&amp;from=wap 点击进入该链接后使用统一账户登录，此时将会发送一POST请求，内容如下： 登录完成后获取到cookie，同时跳转至https://wfw.scu.edu.cn/ncov/wap/default/index，可以获取到上次填写的信息 最后在https://wfw.scu.edu.cn/ncov/wap/default/save以json格式提交填报信息 基础知识HTTP头字段（英语：HTTP header fields）是指在超文本传输协议（HTTP）的请求和响应消息中的消息头部分。它们定义了一个超文本传输协议事务中的操作参数。HTTP头部字段可以自己根据需要定义，因此可能在 Web 服务器和浏览器上发现非标准的头字段 头部字段代表含义，可在https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers中查询 登录请求使用python的requests库发送请求 HTTP协议本身是无状态的，为了让请求之间保持状态，有了session和cookie机制。requests也提供了相应的方法去操纵它们。 requests中的session对象能够让我们跨HTTP请求保持某些参数，即在同一个 Session 实例发出的所有请求之间保持 cookie。 在请求之前，首先声明一个新的session用于会话保持 import requests session=requests.Session() r=session.get(url,header)#后续请求发送示意 接下来进行账户登录设置好post传输的data以及headers，均使用json格式 loginURL='https://wfw.scu.edu.cn/a_scu/api/sso/check' loginData={ 'username': username, 'password': password } loginHeader={ 'Host':'wfw.scu.edu.cn', 'User-Agent':'', 'Origin':'https://wfw.scu.edu.cn', 'Referer':'' } 发送登录请求，session对象会帮助我们保存cookie，说白了我们登录的原因也就是为了获取cookie loginR=session.post(loginURL,data=loginData,headers=loginHeader) 获取信息现在已获取了cookie，可以使用session对象拉取上次填报信息，同样好设置请求头，伪装成一次正常的访问，提前在burp中抓包可以预想到接收到的内容 接收到的内容比较复杂，但是我们一定记得在平时打卡的时候，大部分时候我们都不需要进行一项一项地填写，系统将会为我们自动填充上次填写的内容，因此我们可以在返回的response中找到我们上次填写的信息oldInfo。 我们直接将response切换为string格式，然后使用正则匹配式找到我们上次填写的oldInfo信息，再把字符串转回json格式，方便post请求上传data import requests import re import json getR=session.get(getURL,headers=getHeader).text oldInfo=re.findall(r'.*?oldInfo: (.*),.*?',getR)#正则匹配 oldData=eval(oldInfo[0])#将字符转化为json 正则 re.findall （返回string中所有与pattern相匹配的全部字串，返回形式为数组） re.findall(pattern, string, flags=0) 提交信息将刚才获取的oldInfo使用POST请求发送到目标URL postURL='https://wfw.scu.edu.cn/ncov/wap/default/save' postHeader={ 'Host':'wfw.scu.edu.cn', 'User-Agent':'', 'Content-Type': 'application/x-www-form-urlencoded;', 'X-Requested-With': 'XMLHttpRequest', 'Content-Length': '2082', 'Origin':'', 'Connection': 'keep-alive', 'Referer':'' } postR=session.post(postURL,data=oldData,headers=postHeader).json() 配置邮件客户端 SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。 Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。 其实现在已经填报成功了，不过还是设个邮件每天播报一下，说不定哪一天就gg了呢 使用到的库如下 import smtplib from email.mime.text import MIMEText 构造MIMEText对象时，第一个参数就是邮件正文，第二个参数是MIME的subtype，传入plain表示纯文本，最终的MIME就是'text/plain'，最后一定要用utf-8编码保证多语言兼容性。 msg = MIMEText(content, 'plain', 'utf-8') msg['Subject'] = '打卡播报' msg['From'] = From msg['To'] = To 发送邮件的过程如下， client = smtplib.SMTP_SSL('smtp.qq.com', smtplib.SMTP_SSL_PORT) client.login(From, pwd) client.sendmail(From, To, msg.as_string()) client.quit() login()方法用来登录SMTP服务器，sendmail()方法就是发邮件，邮件正文是一个str，as_string()把MIMEText对象变成str 这里的mail_password填写的为授权码而非自己的QQ邮箱密码,获取授权码的过程如下 定时任务设定为每天早上执行任务，在[1]文章中总结了几种定时执行任务的方法，本文使用的是任务框架APScheduler 使用的库以及使用方法如下： from apscheduler.schedulers.blocking import BlockingScheduler from apscheduler.schedulers.background import BackgroundScheduler #创建调度器：BlockingScheduler scheduler = BlockingScheduler(timezone='Asia/Shanghai') #添加任务 scheduler.add_job(funcName, 'cron',hour=7,minute=40) scheduler.start() 时区设置不是必须的，如果你能忍受长段warning的话 另外APScheduler支持多种调度方法，包括了date(一次性日期)，interval（间隔）和cron（个性化） # 2016-12-12 12:00:00运行一次job_function sched.add_job(job_function, 'date', run_date=datetime(2016, 12, 12, 12, 0, 0), args=['text']) # 每两个小时调一下job_function sched.add_job(job_function, 'interval', hours=2) # 截止到2016-12-30 00:00:00，每周一到周五早上五点半运行job_function sched.add_job(job_function, 'cron', day_of_week='mon-fri', hour=5, minute=30, end_date='2016-12-31') 总结感谢同院同学的脚本参考，让我在实施过程中少走了很多弯路，同时再一次认识到自己的不足之处，对于HTTP请求头以及正则表达式的理解不够充分，下次另外写文章专门整理一下。","categories":[{"name":"工具","slug":"工具","permalink":"https://jjjjer.github.io/categories8/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"python","slug":"python","permalink":"https://jjjjer.github.io/tags/python/"},{"name":"HTTP","slug":"HTTP","permalink":"https://jjjjer.github.io/tags/HTTP/"},{"name":"SMTP","slug":"SMTP","permalink":"https://jjjjer.github.io/tags/SMTP/"}]},{"title":"驾考笔记","slug":"科目二","date":"2021-12-06T06:45:33.000Z","updated":"2021-12-21T07:51:25.516Z","comments":true,"path":"2021/12/06/ke-mu-er/","link":"","permalink":"https://jjjjer.github.io/2021/12/06/ke-mu-er/","excerpt":"","text":"驾考笔记 最近除了在做毕业设计就是在考驾照，因为开始地比较晚（接连遇上封校以及教练辞职等各种事故）不想拖到下学期所以想要快速考完。在这里记录一下教练说的一些知识点，希望自己能一把过然后掌控方向盘! 科二全过程复盘准备工作 首先调整座椅，以及后视镜。 座椅需要能够把离合踩到底后视镜需要前把手在镜子三分之一的位置，并且能够看到地面 看不到后轮胎 这个时候还可以进行点火操作 然后系上安全带，确认车是在空挡，离合踩到底挂上一档 松开手刹 坡起 评分标准 松开离合，需要有一定初速度，参考线为鼻尖对准地上的地缝线。车身边距过宽不合格 当目光与雨刮器以及杆杆对齐时踩下离合与刹车，定住 拉起手刹，价值10分 放下手刹，准备起步，此时不松刹车 轻踩离合，听到汽车的轰鸣声 松开刹车 走 曲线行驶 首先摆正位置 参照物为自己的左前引擎盖以及雨刮器 两个都需要在道路内 左拐时贴上外沿线立即左打一圈左引擎盖贴着右道路线行驶 可以左右修正一些 但不宜大修 拐到底后（即左引擎盖贴上左道路线时），方向盘回正，缓慢行驶 当雨刮器贴上左道路线时 方向盘转动一圈 开始右拐 回到道路中间时回正 侧方位停车 找到停车点，以雨刮器右侧为参考线 贴着右侧道路线行驶，在右后视镜中看到车库角时停车 踩住离合挂倒挡 轻松离合倒车 当右后视镜中车库角消失时右打死 看左后视镜 当车库最远的角出现时回正方向盘 看左后轮 当后轮碾压车库线时左打死 停正车身后挂上左转灯 踩住离合挂1档 方向盘仍然为左打死状态 轻松离合起步 当车库最远角在左后视镜里出现时回正方向盘 雨刮器贴上左道路线时左打一圈 雨刮器贴上右道路线时回正方向盘，出库 倒车入库 摆车身 右飞时对准线为雨刮器左侧 左飞时对准线为转速表中心 行驶到虚线位于自己身旁时可以停止 以左飞为例 踩住离合挂上倒挡 当虚线行驶到雨刮器位置时左打死 看左后视镜 当车库角离车身大约两指宽时回正半圈 看右后视镜 当右边车库线完全出现时回正方向盘 汽车入库，可以左右修正一些 当后轮碾压到参考线时停车 挂1挡，摆车身，开始右飞 直角转弯 左引擎盖贴着左侧道路线驶入（不必纠结是否完全贴上） 打开右转向灯 直角在车门开关处时右打死 收尾 拉上手刹 踩住离合挂空挡 大概念","categories":[{"name":"笔记","slug":"笔记","permalink":"https://jjjjer.github.io/categories8/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://jjjjer.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"Beginning","slug":"Beginning","date":"2021-11-29T07:25:17.000Z","updated":"2021-12-23T13:52:49.828Z","comments":true,"path":"2021/11/29/beginning/","link":"","permalink":"https://jjjjer.github.io/2021/11/29/beginning/","excerpt":"","text":"在经历了诸多困难（主要是克服懒）之后，我终于建立了自己的博客。我为啥要建博客是因为我觉着自己这样才像一个正经（装模做样）的极客，所以也希望这个小站能够成为帮助我记录学习和生活的好朋友 建站时踩过的坑Hexo框架在选择博客框架的时候毫不犹豫选择了hexo，为啥呢因为我没有耐心去一个个比较：我需要一个博客框架，而hexo正好第一个出现在了我的眼前，这个成熟又稳重的框架虽然我不了解，但是他看起来就很可靠。 不过接触之后我觉得hexo还是比较容易上手的，它有比较完整的文档，并且在网上随便就能搜到有关的一大堆教程以及踩坑记录。所以在各种不知名网友的帮助下，我像装扮QQ空间一样装扮好了我的博客。 上手在准备方面只需要确保电脑上安装了NodeJS，那么就可以直接使用以下命令安装它的依赖包，并且使用它的官网首页https://hexo.io/zh-cn/ 上列出来的小白教程就能在本地预览它 npm install hexo-cli -g hexo init blog cd blog npm install hexo server 它的基础页面大概长这个样子 非常地毛胚啊，但是也算是一应俱全，特别是对于我这种预算不高要求甚少的来说也勉强能够凑合 接下来我们可以打开我们安装的hexo包的文件夹，仔细查看一下我们的毛胚房的构造，好知道从哪儿开工 . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 简单来说，**config.yml ** 这个文件是最重要的，相当于一份装修合同，里面拟好了这个房子是谁的、这个窝起的啥名儿、装修是啥风格等等 package.json我们不关心就是一些依赖设置，scaffolds里面放置的是写文章时候的模板，新建页面的模板，以及文章草稿的模板，模板这个东西显然是为了以后偷懒用的。source里面放置的就是我们写的文章或者草稿啦。 themes是个好东西，用来存放你下载的主题，也就是各种装修风格 所以接下来首先我打开的是hexo的config.yml文件，设置一些房子的基本信息 title: JeBlog subtitle: Begin again description: '' keywords: null author: Jane Janea language: zh-CN timezone: '' url: https://jjjjer.github.io/ permalink: ':year/:month/:day/:title/' 这个里面呢每个参数的意思都可以在https://hexo.io/zh-cn/docs/configuration 中找到，根据自己的需要设置即可 主题hexo的themes页面可以找到各种各样的主题，我最后选择的主题是matery，为啥呢因为我之前本来选择了一个别的主题但是隔了一周没有去关心了结果再上手就整不会了，所以重新选择了matery，还因为它有中文文档并且它的排版看起来比较舒服，虽然我觉得原作者的审美不是很行，但是我觉得我能靠我自己的软装修功夫让它变得好看一些（原作者配色be like 好，那么在我们下载完成后该主题后第一步是更改一下我们的主题设置，在hexo的配置文件**_config.yml**中设置主题: theme: hexo-theme-matery-master 接下来是激烈又繁琐的软装修设计，主要操作的文件有matery主题的配置文件以及matery.css文件，作者十分友好地在配置文件的每个条目都添加了中文注释，同时呢我本人比较喜欢舒服淡雅一点的配色去掉了主页的彩虹蒙版并自己调了色彩，最后的呈现效果本人还是比较满意 Github Pages在做好了装修的工作之后，我的博客得有个正经的样子，我得给人家看啊（虽然主要是给自己看，我甚至没有安装评论之类的插件），但是我又不想顶着ip地址+端口这样难看的url给人访问，我还舍不得花钱租域名，所以最后我决定在github上托管我自己的博客，顺便使用github pages部署，省钱，又体面。 So我注册了一个匿名邮箱，新建了一个github账号，新建了一个仓库，根据前辈们的经验，仓库名应命名为：用户名.github.io，彰显极客范儿。 接下来我在这里设置了仓库的github pages，域名直接为该仓库名，所以在刚才我们的仓库名命名时就很有讲究，其实github本身就有博客模板，可以在这里choose a theme 设置完成后直接访问域名就能看到默认的github pages页面 部署博客现在房主十分开心，即将把自己的房子挂到互联网上去，但是在hexo官方的部署方法指导下我尝试了多次仍然没有成功，github经常报错，最终被折磨得没脾气的我重新设置了本地git的连接，主要的步骤如下： git config --global user.name \"github用户名\" git config --global user.email \"github注册邮箱\" ssh-keygen -t rsa -C \"github注册邮箱\" 接下来，我们在 C:\\Users\\用户名/.ssh/id_rsa.pub 文件夹下能够查看到我们生成的公钥，复制出来粘贴到github账户设置的SSH keys中 执行以下命令查看ssh是否连接成功 ssh git@github.com OK，现在ssh连接成功了，但是我仍然部署失败，在寻求前辈们的帮助下，我在hexo的配置文件中将deploy设置为了 deploy: type: git repository: git@github.com:jjjjer/jjjjer.github.io.git 这样，我们最终使用hexo g &amp;&amp; hexo d 命令，终于将我的博客push到了github仓库里，虽然没明白是为什么，但是之前的那种仓库索引方式似乎一直无法连接，github的使用实在是有些繁琐 但是，当我特别开心地在地址栏里输入我的域名的时候仍然显示的是之前生成的默认页面，最后查看了一下是分支的问题，我push的代码和pages的设置不是同一分支，修改了一下就可以啦 总结总而言之，在漫长的装修过程中我的房子终于完工啦，虽然它看起来很简陋，不过每次完成一个项目之后我都会反复去点击这里的每个button，查看各种细枝末节的角落，我觉得它已经足够好。 在这个过程中还学习了不少markdown语法以及设置了typora图床，我很喜欢这种书写方式，它非常简洁并且高效。我的一个重要朋友之前总嫌弃我写的文档太差，前言不搭后语，语重心长地告诫我：可别瞧不起写文档，谁会去了解一个没有文档的项目啊。所以以后要多多产出，学习，记录！ 后续如果资金和时间充裕的话，会考虑搬家（换域名或者主题）和添置物件（加上评论之类的功能）。就像我给这个小房子设置的title一样：Begin Again，我的人生走到了一个新的阶段，希望能有新的开始。","categories":[{"name":"教程","slug":"教程","permalink":"https://jjjjer.github.io/categories8/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jjjjer.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://jjjjer.github.io/tags/github/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-11-06T09:53:21.604Z","updated":"2021-12-21T07:51:29.468Z","comments":true,"path":"2021/11/06/hello-world/","link":"","permalink":"https://jjjjer.github.io/2021/11/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"教程","slug":"教程","permalink":"https://jjjjer.github.io/categories8/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jjjjer.github.io/tags/hexo/"}]}],"categories":[{"name":"工具","slug":"工具","permalink":"https://jjjjer.github.io/categories8/%E5%B7%A5%E5%85%B7/"},{"name":"笔记","slug":"笔记","permalink":"https://jjjjer.github.io/categories8/%E7%AC%94%E8%AE%B0/"},{"name":"教程","slug":"教程","permalink":"https://jjjjer.github.io/categories8/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"python","slug":"python","permalink":"https://jjjjer.github.io/tags/python/"},{"name":"HTTP","slug":"HTTP","permalink":"https://jjjjer.github.io/tags/HTTP/"},{"name":"SMTP","slug":"SMTP","permalink":"https://jjjjer.github.io/tags/SMTP/"},{"name":"生活","slug":"生活","permalink":"https://jjjjer.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"hexo","slug":"hexo","permalink":"https://jjjjer.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://jjjjer.github.io/tags/github/"}]}