<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Beginning</title>
      <link href="/2021/11/29/beginning/"/>
      <url>/2021/11/29/beginning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在经历了诸多困难（主要是克服懒）之后，我终于建立了自己的博客。我为啥要建博客是因为我觉着自己这样才像一个正经（装模做样）的极客，所以也希望这个小站能够成为帮助我记录学习和生活的好朋友</p></blockquote><h2 id="建站时踩过的坑"><a href="#建站时踩过的坑" class="headerlink" title="建站时踩过的坑"></a>建站时踩过的坑</h2><h3 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h3><p>在选择博客框架的时候毫不犹豫选择了hexo，为啥呢因为我没有耐心去一个个比较：我需要一个博客框架，而hexo正好第一个出现在了我的眼前，这个成熟又稳重的男人虽然我不了解，但是他看起来就很可靠。</p><p><img src="https://raw.githubusercontent.com/jjjjer/Figurebed/master/img/image-20211129153402914.png" alt="image-20211129153402914"></p><p>不过接触之后我觉得hexo还是比较容易上手的，它有比较完整的文档，并且在网上随便就能搜到有关的一大堆教程以及踩坑记录。所以在各种不知名网友的帮助下，我像装扮QQ空间一样装扮好了我的博客。</p><h4 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h4><p>在准备方面只需要确保电脑上安装了NodeJS，那么就可以直接使用以下命令安装它的依赖包，并且使用它的官网首页<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 上列出来的小白教程就能在本地预览它</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的基础页面大概长这个样子</p><p><img src="https://raw.githubusercontent.com/jjjjer/Figurebed/master/img/image-20211129154659951.png" alt="image-20211129154659951"></p><p>非常地毛胚啊，但是也算是一应俱全，特别是对于我这种预算不高要求甚少的来说也勉强能够凑合</p><p>接下来我们可以打开我们安装的hexo包的文件夹，仔细查看一下我们的毛胚房的构造，好知道从哪儿开工</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，**_config.yml** 这个文件是最重要的，相当于一份装修合同，里面拟好了这个房子是谁的、这个窝起的啥名儿、装修是啥风格等等</p><p>package.json我们不关心就是一些依赖设置，<strong>scaffolds</strong>里面放置的是写文章时候的模板，新建页面的模板，以及文章草稿的模板，模板这个东西显然是为了以后偷懒用的。<strong>source</strong>里面放置的就是我们写的文章或者草稿啦。</p><p>themes是个好东西，用来存放你下载的主题，也就是各种装修风格</p><p>所以接下来首先我打开的是hexo的**_config.yml**文件，设置一些房子的基本信息</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">title: JeBlogsubtitle: Begin againdescription: ''keywords: nullauthor: Jane Janealanguage: zh-CNtimezone: ''url: https://jjjjer.github.io/permalink: ':year/:month/:day/:title/'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个里面呢每个参数的意思都可以在<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a> 中找到，根据自己的需要设置即可</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>hexo的themes页面可以找到各种各样的主题，我最后选择的主题是matery，为啥呢因为我之前本来选择了一个别的主题但是隔了一周没有去关心了结果再上手就整不会了，所以重新选择了matery，还因为它有中文文档并且它的排版看起来比较舒服，虽然我觉得原作者的审美不是很行，但是我觉得我能靠我自己的软装修功夫让它变得好看一些（原作者配色be like</p><p><img src="https://raw.githubusercontent.com/jjjjer/Figurebed/master/img/image-20211129165136846.png" alt="image-20211129165136846"></p><p>好，那么在我们下载完成后该主题后第一步是更改一下我们的主题设置，在hexo的配置文件**_config.yml**中设置主题:</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">theme: hexo-theme-matery-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来是激烈又繁琐的软装修设计，主要操作的文件有matery主题的配置文件以及matery.css文件，作者十分友好地在配置文件的每个条目都添加了中文注释，同时呢我本人比较喜欢舒服淡雅一点的配色去掉了主页的彩虹蒙版并自己调了色彩，最后的呈现效果本人还是比较满意</p><p><img src="https://raw.githubusercontent.com/jjjjer/Figurebed/master/img/image-20211129170904111.png" alt="image-20211129170904111"></p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>在做好了装修的工作之后，我的博客得有个正经的样子，我得给人家看啊（虽然主要是给自己看，我甚至没有安装评论之类的插件），但是我又不想顶着ip地址+端口这样难看的url给人访问，我还舍不得花钱租域名，所以最后我决定在github上托管我自己的博客，顺便使用github pages部署，省钱，又体面。</p><p>So我注册了一个匿名邮箱，新建了一个github账号，新建了一个仓库，根据前辈们的经验，仓库名应命名为：用户名.github.io，彰显极客范儿。</p><p>接下来我在这里设置了仓库的github pages，域名直接为该仓库名，所以在刚才我们的仓库名命名时就很有讲究，其实github本身就有博客模板，可以在这里choose a theme 设置完成后直接访问域名就能看到默认的github pages页面</p><p><img src="https://raw.githubusercontent.com/jjjjer/Figurebed/master/img/image-20211129172035678.png" alt="image-20211129172035678"></p><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>现在房主十分开心，即将把自己的房子挂到互联网上去，但是在hexo官方的部署方法指导下我尝试了多次仍然没有成功，github经常报错，最终被折磨得没脾气的我重新设置了本地git的连接，主要的步骤如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"github用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"github注册邮箱"</span>ssh-keygen -t rsa -C <span class="token string">"github注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来，我们在 C:\Users\用户名/.ssh/id_rsa.pub 文件夹下能够查看到我们生成的公钥，复制出来粘贴到github账户设置的SSH keys中</p><p>执行以下命令查看ssh是否连接成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/jjjjer/Figurebed/master/img/image-20211129174317203.png" alt="image-20211129174317203"></p><p>OK，现在ssh连接成功了，但是我仍然部署失败，在寻求前辈们的帮助下，我在hexo的配置文件中将deploy设置为了</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repository: git@github.com:jjjjer/jjjjer.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，我们最终使用hexo g &amp;&amp; hexo d 命令，终于将我的博客push到了github仓库里，虽然没明白是为什么，但是之前的那种仓库索引方式似乎一直无法连接，github的使用实在是有些繁琐</p><p>但是，当我特别开心地在地址栏里输入我的域名的时候仍然显示的是之前生成的默认页面，最后查看了一下是分支的问题，我push的代码和pages的设置不是同一分支，修改了一下就可以啦</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，在漫长的装修过程中我的房子终于完工啦，虽然它看起来很简陋，不过每次完成一个项目之后我都会反复去点击这里的每个button，查看各种细枝末节的角落，我觉得它已经足够好。</p><p>在这个过程中还学习了不少markdown语法以及设置了typora图床，我很喜欢这种书写方式，它非常简洁并且高效。我的一个重要朋友之前总嫌弃我写的文档太差，前言不搭后语，语重心长地告诫我：可别瞧不起写文档，谁会去了解一个没有文档的项目啊。所以以后要多多产出，学习，记录！</p><p>后续如果资金和时间充裕的话，会考虑搬家（换域名或者主题）和添置物件（加上评论之类的功能）。就像我给这个小房子设置的title一样：Begin Again，我的人生走到了一个新的阶段，希望能有新的开始。</p>]]></content>
      
      
      <categories>
          
          <category> 建站第一天 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/06/hello-world/"/>
      <url>/2021/11/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
