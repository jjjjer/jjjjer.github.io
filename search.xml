<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在远程服务器上部署脚本</title>
      <link href="/2021/12/24/zai-yuan-cheng-fu-wu-qi-shang-bu-shu-jiao-ben/"/>
      <url>/2021/12/24/zai-yuan-cheng-fu-wu-qi-shang-bu-shu-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="在远程服务器上部署脚本"><a href="#在远程服务器上部署脚本" class="headerlink" title="在远程服务器上部署脚本"></a>在远程服务器上部署脚本</h1><blockquote><p>其实这个功能非常常用，在进行<strong>后端部署</strong>或者<strong>自动化脚本执行</strong>的时候，所以还是记录一下省的每次都去google</p></blockquote><h2 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h2><p>使用SSH（远程桌面）连接到服务器，有许多软件可选择，本文使用的是Xshell连接，新建一个会话并输入连接的服务器IP</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224110444110.png" alt="image-20211224110444110"></p><p>新建完成后双击会话开始连接，需要输入服务器的用户名以及密码</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224110849633.png" alt="image-20211224110849633"></p><ul><li>Xshell复制快捷键 Ctrl+Insert    粘贴快捷键 Shift+Insert</li></ul><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><p>根据之前的使用经验，我觉得宝塔面板最大的好处就是<strong>可视化</strong>和<strong>汉化</strong>，不需要在命令行中敲击复杂的命令，虽然这样有点不够极客，但是我觉得比较适合我，因为我记不住命令。不过宝塔的权限非常高，最近也出现了很多安全性的问题，使用宝塔的朋友记得要经常升级宝塔</p><p>安装宝塔的教程参考官方链接 <a href="https://www.bt.cn/bbs/thread-19376-1-1.html%EF%BC%8C%E5%85%B6%E4%B8%AD%E8%BF%98%E5%8C%85%E5%90%AB%E4%BA%86%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%95%86%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E5%AE%9A%E8%A6%81%E5%BC%80%E6%94%BE%EF%BC%89">https://www.bt.cn/bbs/thread-19376-1-1.html，其中还包含了不同的服务商开放端口的教程（一定要开放）</a></p><p>接下来在服务器中使用<code>bt</code>命令可以查看面板的各种信息，例如忘记了面板的登录入口以及用户名密码等，都可以在这里查看</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224112712017.png" alt="image-20211224112712017"></p><p>通过外网面板地址登录进入面板界面，可以说现在你所有想干的事都可以在这里完成</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224113437712.png" alt="image-20211224113437712"></p><p>例如在root路径下新建一个文件夹并上传一个文件，在shell中我们需要输入如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span><span class="token builtin class-name">cd</span> root<span class="token function">mkdir</span> je<span class="token builtin class-name">cd</span> je <span class="token comment">#上传文件需要借助lrzsz包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224113800355.png" alt="image-20211224113800355"></p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224113820634.png" alt="image-20211224113820634"></p><p>宝塔甚至还能够实现在线文本编辑</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224114543186.png" alt="image-20211224114543186"></p><h2 id="保持任务"><a href="#保持任务" class="headerlink" title="保持任务"></a>保持任务</h2><p>服务器经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。<strong>必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。</strong><code>Screen</code>程序可以很好地帮助我们解决这个问题</p><p>Debian/Ubuntu系统执行以下命令安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于screen的命令使用如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> -ls<span class="token comment">#查看screen列表</span><span class="token function">screen</span> -S <span class="token string">'name'</span><span class="token comment">#创建新的screen</span><span class="token function">screen</span> -r <span class="token string">'name'</span><span class="token comment">#进入screen</span>Ctrl + a d<span class="token comment">#暂时退出当前screen</span><span class="token builtin class-name">exit</span><span class="token comment">#退出并删除当前screen</span><span class="token function">screen</span> -d <span class="token string">'name'</span><span class="token comment">#远程分离该screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然以上的内容我已经反复配置多次了，但是由于自己记性太差并且产出不多的原因，总是忘记其中的命令行用法，这次就完完整整地记录一遍，下次就不用去找谷歌帮忙了(●ˇ∀ˇ●)  多半是回到这里再照着敲。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> Screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python实现自动化打卡</title>
      <link href="/2021/12/23/zi-dong-da-qia-jiao-ben-bian-xie-guo-cheng-ji-lu/"/>
      <url>/2021/12/23/zi-dong-da-qia-jiao-ben-bian-xie-guo-cheng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="脚本编写过程记录"><a href="#脚本编写过程记录" class="headerlink" title="脚本编写过程记录"></a>脚本编写过程记录</h1><p>本来我是不必造轮子来写这个自动化打卡脚本的，但是无奈之前依赖的脚本在一次删库事件中丢失了，然后在某人的push之下完成了该脚本，感谢伟大的python以及python各类库的开发者们，你们真滴很不错~</p><h2 id="登录过程"><a href="#登录过程" class="headerlink" title="登录过程"></a>登录过程</h2><blockquote><p>在进行写脚本之前首先跑通整个登录过程并抓包分析，本文是根据同院同学的打卡脚本找到的登录入口，现在学校已经进行了微服务的升级，升级之后的登录入口更改，并且需要验证码校验，等有空了再研究。</p></blockquote><p>登录入口如下，<a href="https://wfw.scu.edu.cn/site/polymerization/polymerizationLogin?redirect=https://wfw.scu.edu.cn/ncov/wap/default/index&amp;from=wap">https://wfw.scu.edu.cn/site/polymerization/polymerizationLogin?redirect=https%3A%2F%2Fwfw.scu.edu.cn%2Fncov%2Fwap%2Fdefault%2Findex&amp;from=wap</a></p><p>点击进入该链接后使用统一账户登录，此时将会发送一<code>POST</code>请求，内容如下：</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211223145309586.png" alt="image-20211223145309586"></p><p>登录完成后获取到<code>cookie</code>，同时跳转至<a href="https://wfw.scu.edu.cn/ncov/wap/default/index%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E4%B8%8A%E6%AC%A1%E5%A1%AB%E5%86%99%E7%9A%84%E4%BF%A1%E6%81%AF">https://wfw.scu.edu.cn/ncov/wap/default/index，可以获取到上次填写的信息</a></p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211223145519568.png" alt="image-20211223145519568"></p><p>最后在<a href="https://wfw.scu.edu.cn/ncov/wap/default/save%E6%8F%90%E4%BA%A4%E5%A1%AB%E6%8A%A5%E4%BF%A1%E6%81%AF">https://wfw.scu.edu.cn/ncov/wap/default/save提交填报信息</a></p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211224100451717.png" alt="image-20211224100451717"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>HTTP头字段</strong>（英语：HTTP header fields）是指在<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">超文本传输协议</a>（HTTP）的请求和响应消息中的消息头部分。它们定义了一个超文本传输协议事务中的操作参数。HTTP头部字段可以自己根据需要定义，因此可能在 Web 服务器和浏览器上发现非标准的头字段</p><p>头部字段代表含义，可在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers%E4%B8%AD%E6%9F%A5%E8%AF%A2">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers中查询</a></p><h2 id="登录请求"><a href="#登录请求" class="headerlink" title="登录请求"></a>登录请求</h2><p>使用<code>python</code>的<code>requests</code>库发送请求</p><p>HTTP协议本身是无状态的，为了让请求之间保持状态，有了<code>session</code>和<code>cookie</code>机制。<code>requests</code>也提供了相应的方法去操纵它们。</p><p><code>requests</code>中的<code>session</code>对象能够让我们跨<code>HTTP</code>请求保持某些参数，<strong>即在同一个 Session 实例发出的所有请求之间保持 cookie</strong>。</p><p>在请求之前，首先声明一个新的session用于会话保持</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>header<span class="token punctuation">)</span><span class="token comment">#后续请求发送示意</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来进行账户登录，设置好<code>post</code>传输的<code>data</code>以及<code>headers</code>，虽然使用的是<code>dict</code>格式，但<code>Reqeusts</code>支持自动将传递给<code>requests.post()</code>的<code>data</code>参数以<code>form</code>表单形式发送<code>post</code>请求，因此使用的数据提交格式仍然为<code>application/x-www-form-urlencoded</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loginURL<span class="token operator">=</span><span class="token string">'https://wfw.scu.edu.cn/a_scu/api/sso/check'</span>loginData<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">}</span>loginHeader<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'wfw.scu.edu.cn'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'Origin'</span><span class="token punctuation">:</span><span class="token string">'https://wfw.scu.edu.cn'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送登录请求，<code>session</code>对象会帮助我们保存<code>cookie</code>，说白了我们登录的原因也就是为了获取<code>cookie</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loginR<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>loginURL<span class="token punctuation">,</span>data<span class="token operator">=</span>loginData<span class="token punctuation">,</span>headers<span class="token operator">=</span>loginHeader<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><p>现在已获取了<code>cookie</code>，可以使用<code>session</code>对象拉取上次填报信息，同样好设置请求头，伪装成一次正常的访问，提前在<code>burp</code>中抓包可以预想到接收到的内容</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211223205502727.png" alt="image-20211223205502727"></p><p>接收到的内容比较复杂，但是我们记得在平时打卡的时候，大部分时候我们都不需要进行一项一项地填写，系统将会为我们自动填充上次填写的内容，因此我们可以在返回的<code>response</code>中找到我们上次填写的信息<code>oldInfo</code>。</p><p>我们直接将<code>response</code>切换为<code>string</code>格式，然后使用正则匹配式找到我们上次填写的<code>oldInfo</code>信息，再把字符串转为<code>dict</code>格式，方便<code>post</code>请求上传<code>data</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> jsongetR<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>getURL<span class="token punctuation">,</span>headers<span class="token operator">=</span>getHeader<span class="token punctuation">)</span><span class="token punctuation">.</span>textoldInfo<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'.*?oldInfo: (.*),.*?'</span><span class="token punctuation">,</span>getR<span class="token punctuation">)</span><span class="token comment">#正则匹配</span>oldData<span class="token operator">=</span><span class="token builtin">eval</span><span class="token punctuation">(</span>oldInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#将字符转化为json</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>re.findall</code>  （返回string中所有与pattern相匹配的全部字串，返回形式为数组），使用方法如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提交信息"><a href="#提交信息" class="headerlink" title="提交信息"></a>提交信息</h2><p>将刚才获取的<code>oldInfo</code>使用<code>POST</code>请求发送到目标<code>URL</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">postURL<span class="token operator">=</span><span class="token string">'https://wfw.scu.edu.cn/ncov/wap/default/save'</span>postHeader<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'wfw.scu.edu.cn'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded;'</span><span class="token punctuation">,</span>    <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'2082'</span><span class="token punctuation">,</span>    <span class="token string">'Origin'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span>postR<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>postURL<span class="token punctuation">,</span>data<span class="token operator">=</span>oldData<span class="token punctuation">,</span>headers<span class="token operator">=</span>postHeader<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置邮件客户端"><a href="#配置邮件客户端" class="headerlink" title="配置邮件客户端"></a>配置邮件客户端</h2><blockquote><p>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。</p><p>Python对SMTP支持有<code>smtplib</code>和<code>email</code>两个模块，<code>email</code>负责构造邮件，<code>smtplib</code>负责发送邮件。</p></blockquote><p>其实现在已经填报成功了，不过还是设个邮件每天播报一下，说不定哪一天就gg了呢</p><p>使用到的库如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造<code>MIMEText</code>对象时，第一个参数就是邮件正文，第二个参数是MIME的subtype，传入<code>plain</code>表示纯文本，最终的MIME就是<code>'text/plain'</code>，最后一定要用<code>utf-8</code>编码保证多语言兼容性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'打卡播报'</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Frommsg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> To<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发送邮件的过程如下，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">client <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">,</span> smtplib<span class="token punctuation">.</span>SMTP_SSL_PORT<span class="token punctuation">)</span><span class="token comment">#设计邮件客户端</span>client<span class="token punctuation">.</span>login<span class="token punctuation">(</span>From<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token comment">#登录邮件服务器</span>client<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>From<span class="token punctuation">,</span> To<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>login()</code>方法用来登录SMTP服务器，<code>sendmail()</code>方法就是发邮件，邮件正文是一个<code>str</code>，<code>as_string()</code>把<code>MIMEText</code>对象变成<code>str</code></p><p>这里的mail_password填写的为<strong>授权码</strong>而非自己的QQ邮箱密码,获取授权码的过程如下</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211222094423561.png" alt="image-20211222094423561"></p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211222094518751.png" alt="image-20211222094518751"></p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>设定为每天早上执行任务，在文章[1]中总结了几种定时执行任务的方法，本文使用的是任务框架<code>APScheduler</code></p><p>使用的库以及使用方法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> apscheduler<span class="token punctuation">.</span>schedulers<span class="token punctuation">.</span>blocking <span class="token keyword">import</span> BlockingScheduler<span class="token keyword">from</span> apscheduler<span class="token punctuation">.</span>schedulers<span class="token punctuation">.</span>background <span class="token keyword">import</span> BackgroundScheduler<span class="token comment">#创建调度器：BlockingScheduler</span>scheduler <span class="token operator">=</span> BlockingScheduler<span class="token punctuation">(</span>timezone<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token comment">#添加任务</span>scheduler<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>funcName<span class="token punctuation">,</span> <span class="token string">'cron'</span><span class="token punctuation">,</span>hour<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>minute<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>时区设置不是必须的，如果你能忍受长段<code>warning</code>的话</em></p><p>另外APScheduler支持多种调度方法，包括了date(一次性日期)，interval（间隔）和cron（个性化）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 2016-12-12 12:00:00运行一次job_function</span>sched<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>job_function<span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">,</span> run_date<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 每两个小时调一下job_function</span>sched<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>job_function<span class="token punctuation">,</span> <span class="token string">'interval'</span><span class="token punctuation">,</span> hours<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 截止到2016-12-30 00:00:00，每周一到周五早上五点半运行job_function</span>sched<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>job_function<span class="token punctuation">,</span> <span class="token string">'cron'</span><span class="token punctuation">,</span> day_of_week<span class="token operator">=</span><span class="token string">'mon-fri'</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> end_date<span class="token operator">=</span><span class="token string">'2016-12-31'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感谢同院同学的脚本参考，让我在实施过程中少走了很多弯路，同时再一次认识到自己的不足之处，对于<strong>HTTP请求头</strong>以及<strong>正则表达式</strong>的理解不够充分，下次另外写文章专门整理一下。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> HTTP </tag>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>驾考笔记</title>
      <link href="/2021/12/06/jia-kao-bi-ji/"/>
      <url>/2021/12/06/jia-kao-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="驾考笔记"><a href="#驾考笔记" class="headerlink" title="驾考笔记"></a>驾考笔记</h1><blockquote><p>最近除了在做毕业设计就是在考驾照，因为开始地比较晚（接连遇上封校以及教练辞职等各种事故）不想拖到下学期所以想要快速考完。在这里记录一下教练说的一些知识点，希望自己能一把过然后掌控方向盘!</p></blockquote><h2 id="科二全过程复盘"><a href="#科二全过程复盘" class="headerlink" title="科二全过程复盘"></a>科二全过程复盘</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>首先<strong>调整座椅</strong>，以及<strong>后视镜</strong>。</p><p>座椅需要能够把离合踩到底<br>后视镜需要前把手在镜子三分之一的位置，并且能够看到地面 看不到后轮胎 <em>这个时候还可以进行点火操作</em></p></li><li><p>然后<strong>系上安全带</strong>，<strong>确认车是在空挡</strong>，离合踩到底挂上一档  松开手刹</p></li></ol><h3 id="坡起"><a href="#坡起" class="headerlink" title="坡起"></a>坡起</h3><ul><li><p>评分标准</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211206164143505.png" alt="image-20211206164143505"></p></li></ul><ol><li>松开离合，需要有一定初速度，<strong>参考线为鼻尖对准地上的地缝线</strong>。<em>车身边距过宽不合格</em><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master//img/image-20211206164315446.png" alt="image-20211206164315446"></li><li>当<strong>目光与雨刮器以及杆杆对齐</strong>时踩下离合与刹车，定住</li><li><strong>拉起手刹</strong>，价值10分</li><li>放下手刹，准备起步，此时不松刹车</li><li>轻踩离合，<strong>听到汽车的轰鸣声 松开刹车</strong> 走</li></ol><h3 id="曲线行驶"><a href="#曲线行驶" class="headerlink" title="曲线行驶"></a>曲线行驶</h3><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206110407374.png" alt="image-20211206110407374"></p><ol><li><p>首先摆正位置 参照物为自己的左前引擎盖以及雨刮器 两个都需要在道路内</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206111238754.png" alt="image-20211206111238754"></p></li><li><p><strong>左拐时贴上外沿线立即左打一圈</strong><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206111315487.png" alt="image-20211206111315487">左引擎盖贴着右道路线行驶 可以左右修正一些 但不宜大修</p></li><li><p>拐到底后（即左引擎盖贴上左道路线时），方向盘回正，缓慢行驶 </p></li><li><p>当雨刮器贴上左道路线时 方向盘转动一圈 开始右拐</p></li><li><p>回到道路中间时回正</p></li></ol><h3 id="侧方位停车"><a href="#侧方位停车" class="headerlink" title="侧方位停车"></a>侧方位停车</h3><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206111530283.png" alt="image-20211206111530283"></p><ol><li>找到停车点，<strong>以雨刮器右侧为参考线</strong> 贴着右侧道路线行驶，在右后视镜中看到车库角时停车</li><li>踩住离合挂倒挡 轻松离合倒车 当右后视镜中车库角消失时右打死</li><li>看左后视镜 当车库最远的角出现时回正方向盘</li><li>看左后轮 <strong>当后轮碾压车库线时</strong>左打死</li><li>停正车身后<strong>挂上左转灯</strong></li><li>踩住离合挂1档</li><li>方向盘仍然为左打死状态 轻松离合起步 当车库最远角在左后视镜里出现时回正方向盘</li><li>雨刮器贴上左道路线时左打一圈</li><li>雨刮器贴上右道路线时回正方向盘，出库</li></ol><h3 id="倒车入库"><a href="#倒车入库" class="headerlink" title="倒车入库"></a>倒车入库</h3><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206112607274.png" alt="image-20211206112607274"></p><ol><li><p>摆车身 右飞时对准线为<strong>雨刮器左侧</strong> 左飞时对准线为转速表中心</p></li><li><p>行驶到虚线位于自己身旁时可以停止</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206113738044.png" alt="image-20211206113738044"></p></li><li><p>以左飞为例 踩住离合挂上倒挡 当虚线行驶到雨刮器位置时左打死 </p></li><li><p>看左后视镜 <strong>当车库角离车身大约两指宽时回正半圈</strong></p></li><li><p>看右后视镜 当右边车库线完全出现时回正方向盘</p></li><li><p>汽车入库，可以左右修正一些</p></li><li><p>当后轮碾压到参考线时停车 </p></li><li><p>挂1挡，摆车身，开始右飞</p></li></ol><h3 id="直角转弯"><a href="#直角转弯" class="headerlink" title="直角转弯"></a>直角转弯</h3><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206113854324.png" alt="image-20211206113854324"></p><ol><li>左引擎盖贴着左侧道路线驶入（不必纠结是否完全贴上）</li><li><strong>打开右转向灯</strong></li><li>直角在车门开关处时右打死</li></ol><h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3><ol><li>拉上手刹</li><li>踩住离合挂空挡</li></ol><h3 id="大概念"><a href="#大概念" class="headerlink" title="大概念"></a>大概念</h3><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206115048552.png" alt="image-20211206115048552"></p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211206115056432.png" alt="image-20211206115056432"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beginning</title>
      <link href="/2021/11/29/beginning/"/>
      <url>/2021/11/29/beginning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在经历了诸多困难（主要是克服懒）之后，我终于建立了自己的博客。我为啥要建博客是因为我觉着自己这样才像一个正经（装模做样）的极客，所以也希望这个小站能够成为帮助我记录学习和生活的好朋友</p></blockquote><h2 id="建站时踩过的坑"><a href="#建站时踩过的坑" class="headerlink" title="建站时踩过的坑"></a>建站时踩过的坑</h2><h3 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h3><p>在选择博客框架的时候毫不犹豫选择了hexo，为啥呢因为我没有耐心去一个个比较：我需要一个博客框架，而hexo正好第一个出现在了我的眼前，这个成熟又稳重的框架虽然我不了解，但是他看起来就很可靠。</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211129153402914.png" alt="image-20211129153402914"></p><p>不过接触之后我觉得hexo还是比较容易上手的，它有比较完整的文档，并且在网上随便就能搜到有关的一大堆教程以及踩坑记录。所以在各种不知名网友的帮助下，我像装扮QQ空间一样装扮好了我的博客。</p><h4 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h4><p>在准备方面只需要确保电脑上安装了NodeJS，那么就可以直接使用以下命令安装它的依赖包，并且使用它的官网首页<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 上列出来的小白教程就能在本地预览它</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的基础页面大概长这个样子</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211129154659951.png" alt="image-20211129154659951"></p><p>非常地毛胚啊，但是也算是一应俱全，特别是对于我这种预算不高要求甚少的来说也勉强能够凑合</p><p>接下来我们可以打开我们安装的hexo包的文件夹，仔细查看一下我们的毛胚房的构造，好知道从哪儿开工</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，**config.yml ** 这个文件是最重要的，相当于一份装修合同，里面拟好了这个房子是谁的、这个窝起的啥名儿、装修是啥风格等等</p><p>package.json我们不关心就是一些依赖设置，<strong>scaffolds</strong>里面放置的是写文章时候的模板，新建页面的模板，以及文章草稿的模板，模板这个东西显然是为了以后偷懒用的。<strong>source</strong>里面放置的就是我们写的文章或者草稿啦。</p><p>themes是个好东西，用来存放你下载的主题，也就是各种装修风格</p><p>所以接下来首先我打开的是hexo的<strong>config.yml</strong>文件，设置一些房子的基本信息</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">title: JeBlogsubtitle: Begin againdescription: ''keywords: nullauthor: Jane Janealanguage: zh-CNtimezone: ''url: https://jjjjer.github.io/permalink: ':year/:month/:day/:title/'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个里面呢每个参数的意思都可以在<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a> 中找到，根据自己的需要设置即可</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>hexo的themes页面可以找到各种各样的主题，我最后选择的主题是matery，为啥呢因为我之前本来选择了一个别的主题但是隔了一周没有去关心了结果再上手就整不会了，所以重新选择了matery，还因为它有中文文档并且它的排版看起来比较舒服，虽然我觉得原作者的审美不是很行，但是我觉得我能靠我自己的软装修功夫让它变得好看一些（原作者配色be like</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211129165136846.png" alt="image-20211129165136846"></p><p>好，那么在我们下载完成后该主题后第一步是更改一下我们的主题设置，在hexo的配置文件**_config.yml**中设置主题:</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">theme: hexo-theme-matery-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来是激烈又繁琐的软装修设计，主要操作的文件有matery主题的配置文件以及matery.css文件，作者十分友好地在配置文件的每个条目都添加了中文注释，同时呢我本人比较喜欢舒服淡雅一点的配色去掉了主页的彩虹蒙版并自己调了色彩，最后的呈现效果本人还是比较满意</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211129170904111.png" alt="image-20211129170904111"></p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>在做好了装修的工作之后，我的博客得有个正经的样子，我得给人家看啊（虽然主要是给自己看，我甚至没有安装评论之类的插件），但是我又不想顶着ip地址+端口这样难看的url给人访问，我还舍不得花钱租域名，所以最后我决定在github上托管我自己的博客，顺便使用github pages部署，省钱，又体面。</p><p>So我注册了一个匿名邮箱，新建了一个github账号，新建了一个仓库，根据前辈们的经验，仓库名应命名为：用户名.github.io，彰显极客范儿。</p><p>接下来我在这里设置了仓库的github pages，域名直接为该仓库名，所以在刚才我们的仓库名命名时就很有讲究，其实github本身就有博客模板，可以在这里choose a theme 设置完成后直接访问域名就能看到默认的github pages页面</p><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211129172035678.png" alt="image-20211129172035678"></p><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>现在房主十分开心，即将把自己的房子挂到互联网上去，但是在hexo官方的部署方法指导下我尝试了多次仍然没有成功，github经常报错，最终被折磨得没脾气的我重新设置了本地git的连接，主要的步骤如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"github用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"github注册邮箱"</span>ssh-keygen -t rsa -C <span class="token string">"github注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来，我们在 C:\Users\用户名/.ssh/id_rsa.pub 文件夹下能够查看到我们生成的公钥，复制出来粘贴到github账户设置的SSH keys中</p><p>执行以下命令查看ssh是否连接成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jjjjer/Figurebed@master/img/image-20211129174317203.png" alt="image-20211129174317203"></p><p>OK，现在ssh连接成功了，但是我仍然部署失败，在寻求前辈们的帮助下，我在hexo的配置文件中将deploy设置为了</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repository: git@github.com:jjjjer/jjjjer.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，我们最终使用hexo g &amp;&amp; hexo d 命令，终于将我的博客push到了github仓库里，虽然没明白是为什么，但是之前的那种仓库索引方式似乎一直无法连接，github的使用实在是有些繁琐</p><p>但是，当我特别开心地在地址栏里输入我的域名的时候仍然显示的是之前生成的默认页面，最后查看了一下是分支的问题，我push的代码和pages的设置不是同一分支，修改了一下就可以啦</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总而言之，在漫长的装修过程中我的房子终于完工啦，虽然它看起来很简陋，不过每次完成一个项目之后我都会反复去点击这里的每个button，查看各种细枝末节的角落，我觉得它已经足够好。</p><p>在这个过程中还学习了不少markdown语法以及设置了typora图床，我很喜欢这种书写方式，它非常简洁并且高效。我的一个重要朋友之前总嫌弃我写的文档太差，前言不搭后语，语重心长地告诫我：可别瞧不起写文档，谁会去了解一个没有文档的项目啊。所以以后要多多<strong>产出</strong>，<strong>学习</strong>，<strong>记录</strong>！</p><p>后续如果资金和时间充裕的话，会考虑搬家（换域名或者主题）和添置物件（加上评论之类的功能）。就像我给这个小房子设置的title一样：Begin Again，我的人生走到了一个新的阶段，希望能有新的开始。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/06/hello-world/"/>
      <url>/2021/11/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
